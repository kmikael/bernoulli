{"tagline":"A Ruby library for the binomial distribution","body":"# Bernoulli: Discrete probability distribution library for Ruby\r\n\r\n**Bernoulli** implements the four most common discrete probability distributions in an object oriented manner and in pure Ruby.\r\n\r\n- The binomial distribution\r\n- The geometric distribution\r\n- The hypergeometric distribution\r\n- The Poisson distribution\r\n\r\n## Installation\r\n\r\nUse RubyGems to install `bernoulli`\r\n\r\n\t$ gem install bernoulli\r\n\r\n## Tutorial\r\n\r\nThe classes in `bernoulli` reprsent random variables:\r\n\r\n    Bernoulli::Distribution::<DistributionName>\r\n    \r\nIf, for example you wanted to have a geometrically distributed random variable with parameter 0.43, you would do:\r\n\r\n    y = Bernoulli::Distribution::Geometric.new(0.43)\r\n    \r\nAlso if you `require 'bernoulli/shorthand'` too, you will get top level shortcut functions to create new instances of all distributions:\r\n\r\n- `binomdist`\r\n- `geomdist`\r\n- `hgeomdist`\r\n- `poissondist`\r\n\r\nSo `y = geomdist(0.43)` would be equivalent to the code shown above.\r\n    \r\nAfter this you call methods on `y`. The methods avalible to all distributions are:\r\n\r\n- `probability`\r\n- `probability_range`\r\n- `expected_value`\r\n- `variance`\r\n- `standard_deviation`\r\n- `skewness`\r\n- `excess`\r\n\r\nAgain, shortcuts include (but this time included automatically):\r\n\r\n- `ev` for `expected_value`\r\n- `v` for `variance`\r\n- `sd` for `standard_deviation`\r\n- `[]`, which takes a number or a range and then executes `probability` or `probability_range`\r\n\r\n### Example\r\n\r\n    require 'bernoulli'\r\n    require 'bernoulli/shorthand'\r\n    \r\n    x = binomdist(180, 1.0/6)\r\n    # => #<Distribution::Binomial @n=180, @p=0.16666666666666666>\r\n    \r\n    x.ev # => 30.0\r\n    x.v # => 25.0\r\n    x[25..36] # => 0.7665588897840108\r\n    \r\nLast, but not least, there are two methods exclusive to the binomial distribution:\r\n\r\nThe method `sample` returns a random array of length `n`, where each entry is 1 with a probability of `p`. This is esentially modelling a binomial experiment.\r\n\r\nThe method `sample_value` returns the number of successes in a random binomial expriment that was executed using `sample`. `sv` is a shortcut for `sample_value`.\r\n\r\n## Contributing\r\n\r\n`bernoulli` is a small project. After writing the same code for some project and then losing it two or three times I decided to do it one time and well, so I can just call in the code from here next time.\r\n\r\nFeel free to cantact me about anything I could/should add or to contribute in any way to this simple library.\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Bernoulli","google":""}